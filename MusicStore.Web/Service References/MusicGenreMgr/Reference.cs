//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicStore.Web.MusicGenreMgr {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Genre", Namespace="http://schemas.datacontract.org/2004/07/MusicStore.Core", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Genre : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Album> AlbumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Album> Albums {
            get {
                return this.AlbumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumsField, value) != true)) {
                    this.AlbumsField = value;
                    this.RaisePropertyChanged("Albums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GenreId {
            get {
                return this.GenreIdField;
            }
            set {
                if ((this.GenreIdField.Equals(value) != true)) {
                    this.GenreIdField = value;
                    this.RaisePropertyChanged("GenreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/MusicStore.Core")]
    [System.SerializableAttribute()]
    public partial class Album : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumArtUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MusicStore.Web.MusicGenreMgr.Artist ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtistIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MusicStore.Web.MusicGenreMgr.Genre GenreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenreIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumArtUrl {
            get {
                return this.AlbumArtUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumArtUrlField, value) != true)) {
                    this.AlbumArtUrlField = value;
                    this.RaisePropertyChanged("AlbumArtUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumId {
            get {
                return this.AlbumIdField;
            }
            set {
                if ((this.AlbumIdField.Equals(value) != true)) {
                    this.AlbumIdField = value;
                    this.RaisePropertyChanged("AlbumId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MusicStore.Web.MusicGenreMgr.Artist Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtistId {
            get {
                return this.ArtistIdField;
            }
            set {
                if ((this.ArtistIdField.Equals(value) != true)) {
                    this.ArtistIdField = value;
                    this.RaisePropertyChanged("ArtistId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MusicStore.Web.MusicGenreMgr.Genre Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreField, value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GenreId {
            get {
                return this.GenreIdField;
            }
            set {
                if ((this.GenreIdField.Equals(value) != true)) {
                    this.GenreIdField = value;
                    this.RaisePropertyChanged("GenreId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Artist", Namespace="http://schemas.datacontract.org/2004/07/MusicStore.Core")]
    [System.SerializableAttribute()]
    public partial class Artist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtistIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtistId {
            get {
                return this.ArtistIdField;
            }
            set {
                if ((this.ArtistIdField.Equals(value) != true)) {
                    this.ArtistIdField = value;
                    this.RaisePropertyChanged("ArtistId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MusicGenreMgr.iGenre")]
    public interface iGenre {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iGenre/GetAllGenreList", ReplyAction="http://tempuri.org/iGenre/GetAllGenreListResponse")]
        System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre> GetAllGenreList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iGenre/GetAllGenreList", ReplyAction="http://tempuri.org/iGenre/GetAllGenreListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre>> GetAllGenreListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iGenre/GetTopSellingGenres", ReplyAction="http://tempuri.org/iGenre/GetTopSellingGenresResponse")]
        System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre> GetTopSellingGenres(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iGenre/GetTopSellingGenres", ReplyAction="http://tempuri.org/iGenre/GetTopSellingGenresResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre>> GetTopSellingGenresAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iGenre/BrowseGenre", ReplyAction="http://tempuri.org/iGenre/BrowseGenreResponse")]
        MusicStore.Web.MusicGenreMgr.Genre BrowseGenre(string genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iGenre/BrowseGenre", ReplyAction="http://tempuri.org/iGenre/BrowseGenreResponse")]
        System.Threading.Tasks.Task<MusicStore.Web.MusicGenreMgr.Genre> BrowseGenreAsync(string genre);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface iGenreChannel : MusicStore.Web.MusicGenreMgr.iGenre, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iGenreClient : System.ServiceModel.ClientBase<MusicStore.Web.MusicGenreMgr.iGenre>, MusicStore.Web.MusicGenreMgr.iGenre {
        
        public iGenreClient() {
        }
        
        public iGenreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public iGenreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iGenreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iGenreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre> GetAllGenreList() {
            return base.Channel.GetAllGenreList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre>> GetAllGenreListAsync() {
            return base.Channel.GetAllGenreListAsync();
        }
        
        public System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre> GetTopSellingGenres(int count) {
            return base.Channel.GetTopSellingGenres(count);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MusicStore.Web.MusicGenreMgr.Genre>> GetTopSellingGenresAsync(int count) {
            return base.Channel.GetTopSellingGenresAsync(count);
        }
        
        public MusicStore.Web.MusicGenreMgr.Genre BrowseGenre(string genre) {
            return base.Channel.BrowseGenre(genre);
        }
        
        public System.Threading.Tasks.Task<MusicStore.Web.MusicGenreMgr.Genre> BrowseGenreAsync(string genre) {
            return base.Channel.BrowseGenreAsync(genre);
        }
    }
}
